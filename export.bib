@article{Hannousse2021,
   abstract = {Microservice architectures (MSA) are becoming trending alternatives to existing software development paradigms notably for developing complex and distributed applications. Microservices emerged as an architectural design pattern aiming to address the scalability and ease the maintenance of online services. However, security breaches have increased threatening availability, integrity and confidentiality of microservice-based systems. A growing body of literature is found addressing security threats and security mechanisms to individual microservices and microservice architectures. The aim of this study is to provide a helpful guide to developers about already recognized threats on microservices and how they can be detected, mitigated or prevented; we also aim to identify potential research gaps on securing MSA. In this paper, we conduct a systematic mapping in order to categorize threats on MSA with their security proposals. Therefore, we extracted threats and details of proposed solutions reported in selected studies. Obtained results are used to design a lightweight ontology for security patterns of MSA. The ontology can be queried to identify source of threats, security mechanisms used to prevent each threat, applicability layer and validation techniques used for each mechanism. The systematic search yielded 1067 studies of which 46 are selected as primary studies. The results of the mapping revealed an unbalanced research focus in favor of external attacks; auditing and enforcing access control are the most investigated techniques compared with prevention and mitigation. Additionally, we found that most proposed solutions are soft-infrastructure applicable layer compared with other layers such as communication and deployment. We also found that performance analysis and case studies are the most used validation techniques of security proposals.},
   author = {Abdelhakim Hannousse and Salima Yahiouche},
   doi = {10.1016/j.cosrev.2021.100415},
   issn = {15740137},
   journal = {Computer Science Review},
   keywords = {Microservice architectures,Microservices,Security,Systematic mapping},
   month = {8},
   publisher = {Elsevier Ireland Ltd},
   title = {Securing microservices and microservice architectures: A systematic mapping study},
   volume = {41},
   year = {2021},
}
@article{Waseem2021,
   abstract = {Context: Microservices Architecture (MSA) has received significant attention in the software industry. However, little empirical evidence exists on design, monitoring, and testing of microservices systems. Objective: This research aims to gain a deep understanding of how microservices systems are designed, monitored, and tested in the industry. Methods: A mixed-methods study was conducted with 106 survey responses and 6 interviews from microservices practitioners. Results: The main findings are: (1) a combination of domain-driven design and business capability is the most used strategy to decompose an application into microservices, (2) over half of the participants used architecture evaluation and architecture implementation when designing microservices systems, (3) API gateway and Backend for frontend patterns are the most used MSA patterns, (4) resource usage and load balancing as monitoring metrics, log management and exception tracking as monitoring practices are widely used, (5) unit and end-to-end testing are the most used testing strategies, and (6) the complexity of microservices systems poses challenges for their design, monitoring, and testing, for which there are no dedicated solutions. Conclusions: Our findings reveal that more research is needed to (1) deal with microservices complexity at the design level, (2) handle security in microservices systems, and (3) address the monitoring and testing challenges through dedicated solutions.},
   author = {Muhammad Waseem and Peng Liang and Mojtaba Shahin and Amleto Di Salle and Gastón Márquez},
   doi = {10.1016/j.jss.2021.111061},
   issn = {01641212},
   journal = {Journal of Systems and Software},
   keywords = {Design,Industrial survey,Microservices architecture,Monitoring,Testing},
   month = {12},
   publisher = {Elsevier Inc.},
   title = {Design, monitoring, and testing of microservices systems: The practitioners’ perspective},
   volume = {182},
   year = {2021},
}
@article{Lenarduzzi2020,
   abstract = {Background: The migration from a monolithic system to microservices requires a deep refactoring of the system. Therefore, such a migration usually has a big economic impact and companies tend to postpone several activities during this process, mainly to speed up the migration itself, but also because of the demand for releasing new features. Objective: We monitored the technical debt of an SME while it migrated from a legacy monolithic system to an ecosystem of microservices. Our goal was to analyze changes in the code technical debt before and after the migration to microservices. Method: We conducted a case study analyzing more than four years of the history of a twelve-year-old project (280K Lines of Code) where two teams extracted five business processes from the monolithic system as microservices. For the study, we first analyzed the technical debt with SonarQube and then performed a qualitative study with company members to understand the perceived quality of the system and the motivation for possibly postponed activities. Results: The migration to microservices helped to reduce the technical debt in the long run. Despite an initial spike in the technical debt due to the development of the new microservice, after a relatively short period of time the technical debt tended to grow slower than in the monolithic system.},
   author = {Valentina Lenarduzzi and Francesco Lomio and Nyyti Saarimäki and Davide Taibi},
   doi = {10.1016/j.jss.2020.110710},
   issn = {01641212},
   journal = {Journal of Systems and Software},
   keywords = {Architectural debt,Code quality,Microservices,Refactoring,Technical debt},
   month = {11},
   publisher = {Elsevier Inc.},
   title = {Does migrating a monolithic system to microservices decrease the technical debt?},
   volume = {169},
   year = {2020},
}
@article{,
   abstract = {Microservices define an architectural style that conceives systems as a suite of modular, independent and scalable services. While application design is now simpler, designing secure applications is in general harder than for monolithic applications and the current literature offers little orientation to architects and developers regarding solutions. This article describes the design and results of a multivocal literature review of the security solutions that have been proposed for microservice-based systems. The study yielded 370 academic articles and 620 grey literature; duplicates removal and the application of exclusion criteria left 36 from the academic literature and 34 from the grey literature. The security solution(s) proposed in each article were classified into variations of standard security mechanisms (e.g., Access Control) and scopes (Info Management, Threat Modeling, etc), and were associated to security contexts (detect, mitigate/stop, react, recover from attack). Our research questions addressed frequency of publications, research methodologies, security mechanisms, and security contexts. Key findings were that (1) both kinds of literature differ in their preferred empirical research strategies (examples, experiments and case studies); (2) The solutions proposed in the 70 selected articles correspond to 15 classifications of security mechanisms and analyses; (3) the most mentioned security mechanisms are Authentication and Authorization; (4) around 2/3 of solutions focused on Mitigate/Stop attacks, but none on reacting and recovering from them, and (5) the methodologies used are mostly block diagrams and code, with little use of models or analysis. These findings hold for both grey and academic literature. This study is a first step towards providing secure software researchers and practitioners a comprehensive catalog of security solutions and mechanisms, and where the clear identification of the most used security solutions will simplify their reuse to address security problems while designing microservice-based systems.},
   author = {Anelis Pereira-Vale and Eduardo B. Fernandez and Raúl Monge and Hernán Astudillo and Gastón Márquez},
   doi = {10.1016/j.cose.2021.102200},
   issn = {01674048},
   journal = {Computers and Security},
   keywords = {Microservice-based systems,Multivocal literature review,Secure software development,Security mechanisms,Security solutions},
   month = {4},
   publisher = {Elsevier Ltd},
   title = {Security in microservice-based systems: A Multivocal literature review},
   volume = {103},
   year = {2021},
}
@article{Soldani2018,
   abstract = {The design, development, and operation of microservices are picking up more and more momentum in the IT industry. At the same time, academic work on the topic is at an early stage, and still on the way to distilling the actual “Pains & Gains” of microservices as an architectural style. Having witnessed this gap, we set forth to systematically analyze the industrial grey literature on microservices, to identify the technical/operational pains and gains of the microservice-based architectural style. We conclude by discussing research directions stemming out from our analysis.},
   author = {Jacopo Soldani and Damian Andrew Tamburri and Willem Jan Van Den Heuvel},
   doi = {10.1016/j.jss.2018.09.082},
   issn = {01641212},
   journal = {Journal of Systems and Software},
   keywords = {Microservices,Microservices design,Microservices development,Microservices operation,Systematic grey literature review,Systematic literature review},
   month = {12},
   pages = {215-232},
   publisher = {Elsevier Inc.},
   title = {The pains and gains of microservices: A Systematic grey literature review},
   volume = {146},
   year = {2018},
}
@article{,
   abstract = {Context: A microservice architecture is composed of a set of small services, each running in its own process and communicating with lightweight mechanisms. Many aspects on architecting with microservices are still unexplored and existing research is still far from being crispy clear. Objective: We aim at identifying, classifying, and evaluating the state of the art on architecting with microservices from the following perspectives: publication trends, focus of research, and potential for industrial adoption. Method: We apply the systematic mapping methodology. We rigorously selected 103 primary studies and we defined and applied a classification framework to them for extracting key information for subsequent analysis. We synthesized the obtained data and produced a clear overview of the state of the art. Results: This work contributes with (i) a classification framework for research studies on architecting with microservices, (ii) a systematic map of current research of the field, (iii) an evaluation of the potential for industrial adoption of research results, and (iv) a discussion of emerging findings and implications for future research. Conclusion: This study provides a solid, rigorous, and replicable picture of the state of the art on architecting with microservices. Its results can benefit both researchers and practitioners of the field.},
   author = {Paolo Di Francesco and Patricia Lago and Ivano Malavolta},
   doi = {10.1016/j.jss.2019.01.001},
   issn = {01641212},
   journal = {Journal of Systems and Software},
   keywords = {Microservices,Software architecture,Systematic mapping study},
   month = {4},
   pages = {77-97},
   publisher = {Elsevier Inc.},
   title = {Architecting with microservices: A systematic mapping study},
   volume = {150},
   year = {2019},
}
@article{Auer2021,
   abstract = {Context: Re-architecting monolithic systems with Microservices-based architecture is a common trend. Various companies are migrating to Microservices for different reasons. However, making such an important decision like re-architecting an entire system must be based on real facts and not only on gut feelings. Objective: The goal of this work is to propose an evidence-based decision support framework for companies that need to migrate to Microservices, based on the analysis of a set of characteristics and metrics they should collect before re-architecting their monolithic system. Method: We conducted a survey done in the form of interviews with professionals to derive the assessment framework based on Grounded Theory. Results: We identified a set consisting of information and metrics that companies can use to decide whether to migrate to Microservices or not. The proposed assessment framework, based on the aforementioned metrics, could be useful for companies if they need to migrate to Microservices and do not want to run the risk of failing to consider some important information.},
   author = {Florian Auer and Valentina Lenarduzzi and Michael Felderer and Davide Taibi},
   doi = {10.1016/j.infsof.2021.106600},
   issn = {09505849},
   journal = {Information and Software Technology},
   keywords = {Cloud migration,Microservices,Software measurement},
   month = {9},
   publisher = {Elsevier B.V.},
   title = {From monolithic systems to Microservices: An assessment framework},
   volume = {137},
   year = {2021},
}
@article{Zimmermann2017,
   abstract = {Some microservices proponents claim that microservices form a new architectural style; in contrast, advocates of service-oriented architecture (SOA) argue that microservices merely are an implementation approach to SOA. This overview and vision paper first reviews popular introductions to microservices to identify microservices tenets. It then compares two microservices definitions and contrasts them with SOA principles and patterns. This analysis confirms that microservices indeed can be seen as a development- and deployment-level variant of SOA; such microservices implementations have the potential to overcome the deficiencies of earlier approaches to SOA realizations by employing modern software engineering paradigms and Web technologies such as domain-driven design, RESTful HTTP, IDEAL cloud application architectures, polyglot persistence, lightweight containers, a continuous DevOps approach to service delivery, and comprehensive but lean fault management. However, these paradigms and technologies also cause a number of additional design choices to be made and create new options for many “distribution classics” type of architectural decisions. As a result, the cognitive load for (micro-)services architects increases, as well as the design, testing and maintenance efforts that are required to benefit from an adoption of microservices. To initiate and frame the buildup of architectural knowledge supporting microservices projects, this paper compiles related practitioner questions; it also derives research topics from these questions. The paper concludes with a summarizing position statement: microservices constitute one particular implementation approach to SOA (service development and deployment).},
   author = {Olaf Zimmermann},
   doi = {10.1007/S00450-016-0337-0},
   issn = {18652042},
   issue = {3-4},
   journal = {Computer Science - Research and Development},
   keywords = {Architectural principles,Architectural styles,DevOps,Domain-driven design,IDEAL cloud application architectures,Loose coupling,Messaging,Patterns,REST,SOA,Service-oriented computing,Systems management},
   month = {7},
   pages = {301-310},
   publisher = {Springer Verlag},
   title = {Microservices tenets: Agile approach to service development and deployment},
   volume = {32},
   year = {2017},
}
@article{Waseem2021,
   abstract = {Due to its enormous benefits, the research and industry communities have shown an increasing interest in the Microservices Architecture (MSA) style over the last few years. Despite this, there is a limited evidence-based and thorough understanding of the types of issues (e.g., faults, errors, failures, mistakes) faced by microservices system developers and causes that trigger the issues. Such evidence-based understanding of issues and causes is vital for long-term, impactful, and quality research and practice in the MSA style. To that end, we conducted an empirical study on 1, 345 issue discussions extracted from five open source microservices systems hosted on GitHub. Our analysis led to the first of its kind taxonomy of the types of issues in open source microservices systems, informing that the problems originating from Technical debt (321, 23.86%), Build (145, 10.78%), Security (137, 10.18%), and Service execution and communication (119, 8.84%) are prominent. We identified that "General programming errors", "Poor security management", "Invalid configuration and communication", and "Legacy versions, compatibility and dependency"are the predominant causes for the leading four issue categories. Study results streamline a taxonomy of issues, their mapping with underlying causes, and present empirical findings that could facilitate research and development on emerging and next-generation microservices systems.},
   author = {Muhammad Waseem and Peng Liang and Mojtaba Shahin and Aakash Ahmad and Ali Rezaei Nassab},
   doi = {10.1145/3463274.3463337},
   isbn = {9781450390538},
   journal = {ACM International Conference Proceeding Series},
   keywords = {Empirical Study,Issue,Microservice,Microservices Architecture,Open Source Software},
   month = {6},
   pages = {201-210},
   publisher = {Association for Computing Machinery},
   title = {On the nature of issues in five open source microservices systems: An empirical study},
   year = {2021},
}
@article{Torkura2017,
   abstract = {Cloud Native Applications (CNA) consists of multiple collaborating microservice instances working together towards common goals. These microservices leverage the underlying cloud infrastructure to enable several properties such as scalability and resiliency. CNA are complex distributed applications, vulnerable to several security issues affecting microservices and traditional cloud-based applications. For example, each microservice instance could be developed with different technologies e.g. programming languages and databases. This diversity of technologies increases the chances for security vulnerabilities in microservices. Moreover, the fast-paced development cycles of CNA increases the probability of insufficient security tests in the development pipelines, and consequent deployment of vulnerable microservices. Furthermore, cloud native environments are ephemeral, microservices are dynamically launched and de-registered, this factor creates a discoverability challenge for traditional security assessment techniques. Hence, security assessments in such environments require new approaches which are specifically adapted and integrated to CNA. In fact, such techniques are to be cloud native i.e. well integrated into the cloud’s fabric. In this paper, we tackle the above-mentioned challenges through the introduction of a novel Security Control concept - the Security Gateway. To support the Security Gateway concept, two other concepts are proposed: dynamic document store and security health endpoints. We have implemented these concepts using cloud-native design patterns and integrated them into the CNA workflow. Our experimental evaluations validate the efficiency of our proposals, the time overhead due to the security gateway is minimal and the vulnerability detection rate surpasses that of traditional security assessment approaches. Our proposal can therefore be employed to secure CNA and microservice-based implementations.},
   author = {Kennedy A. Torkura and Muhammad I.H. Sukmana and Christoph Meinel},
   doi = {10.1145/3147213.3147229},
   isbn = {9781450351492},
   journal = {UCC 2017 - Proceedings of the10th International Conference on Utility and Cloud Computing},
   keywords = {Application Security,Cloud Native Applications,Microservices,Security Assessment,Vulnerability Assessment,Vulnerability Detection},
   month = {12},
   pages = {171-180},
   publisher = {Association for Computing Machinery, Inc},
   title = {Integrating continuous security assessments in microservices and cloud native applications},
   year = {2017},
}
@article{Sun2016,
   abstract = {Microservice architecture allows different parts of an application to be developed, deployed and scaled independently, therefore becoming a trend for developing cloud applications. However, it comes with challenging security issues. First, the network complexity introduced by the large number of microservices greatly increases the difficulty in monitoring the security of the entire application. Second, microservices are often designed to completely trust each other, therefore compromise of a single microservice may bring down the entire application. The problems are only exacerbated by the cloud, since applications no longer have complete control over their networks. In this paper, we propose a design for security-as-a-service for microservices-based cloud applications. By adding a new API primitive FlowTap for the network hypervisor, we build a flexible monitoring and policy enforcement infrastructure for network traffic to secure cloud applications. We demonstrate the effectiveness of our solution by deploying the Bro network monitor using FlowTap. Results show that our solution is flexible enough to support various kinds of monitoring scenarios and policies and it incurs minimal overhead (~6%) for real world usage. As a result, cloud applications can leverage our solution to deploy network security monitors to flexibly detect and block threats both external and internal to their network.},
   author = {Yuqiong Sun and Susanta Nanda and Trent Jaeger},
   doi = {10.1109/CLOUDCOM.2015.93},
   isbn = {9781467395601},
   journal = {Proceedings - IEEE 7th International Conference on Cloud Computing Technology and Science, CloudCom 2015},
   keywords = {Microservices,Network monitoring,Security},
   month = {2},
   pages = {50-57},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Security-as-a-service for microservices-based cloud applications},
   year = {2016},
}
@article{Mendonca2021,
   abstract = {Microservices have become an essential architectural enabler in cloud-based software development and delivery. 1 Many organizations, from large tech companies (e.g., Google, Amazon, Netflix) to small start-ups, have adopted microservices as a best practice. 2 This has served them well in some cases and, as you will see here, not so well in others.},
   author = {Nabor C. Mendonca and Craig Box and Costin Manolache and Louis Ryan},
   doi = {10.1109/MS.2021.3080335},
   issn = {19374194},
   issue = {5},
   journal = {IEEE Software},
   month = {9},
   pages = {17-22},
   publisher = {IEEE Computer Society},
   title = {The Monolith Strikes Back: Why Istio Migrated from Microservices to a Monolithic Architecture},
   volume = {38},
   year = {2021},
}
@article{Chondamrongkul2020,
   abstract = {Designing a software system that applied the microservice architecture style is a challenging task, as its characteristics are vulnerable to various security attacks. Software architect, therefore, needs to pinpoint the security flaws in the design before the implementation can proceed. This task is error-prone as it requires manual analysis on the design model, to identify security threats and trace possible attack scenarios. This paper presents an automated security analysis approach for microservice architecture. Our approach can automatically identify security threats according to a collection of formally defined security characteristics and provide an insightful result that demonstrates how the attack scenarios may happen. A collection of formally defined security characteristics can be extended to support other security characteristics not addressed in this paper.},
   author = {Nacha Chondamrongkul and Jing Sun and Ian Warren},
   doi = {10.1109/ICSA-C50368.2020.00024},
   isbn = {9781728174150},
   journal = {Proceedings - 2020 IEEE International Conference on Software Architecture Companion, ICSA-C 2020},
   keywords = {Microservice Architecture,Model Checking,Ontology Web Language,Security Analysis},
   month = {3},
   pages = {79-82},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Automated Security Analysis for Microservice Architecture},
   year = {2020},
}
@article{Dragoni2017,
   abstract = {Microservices is an architectural style inspired by service-oriented computing that has recently started gaining popularity. Before presenting the current state of the art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out a few potential solutions.},
   author = {Nicola Dragoni and Saverio Giallorenzo and Alberto Lluch Lafuente and Manuel Mazzara and Fabrizio Montesi and Ruslan Mustafin and Larisa Safina},
   doi = {10.1007/978-3-319-67425-4_12},
   isbn = {9783319674254},
   journal = {Present and Ulterior Software Engineering},
   month = {11},
   pages = {195-216},
   publisher = {Springer International Publishing},
   title = {Microservices: Yesterday, today, and tomorrow},
   year = {2017},
}
@article{Bogner2019,
   abstract = {Microservices are a topic driven mainly by practitioners and academia is only starting to investigate them. Hence, there is no clear picture of the usage of Microservices in practice. In this paper, we contribute a qualitative study with insights into industry adoption and implementation of Microservices. Contrary to existing quantitative studies, we conducted interviews to gain a more in-depth understanding of the current state of practice. During 17 interviews with software professionals from 10 companies, we analyzed 14 service-based systems. The interviews focused on applied technologies, Microservices characteristics, and the perceived influence on software quality. We found that companies generally rely on well-established technologies for service implementation, communication, and deployment. Most systems, however, did not exhibit a high degree of technological diversity as commonly expected with Microservices. Decentralization and product character were different for systems built for external customers. Applied DevOps practices and automation were still on a mediocre level and only very few companies strictly followed the you build it, you run it principle. The impact of Microservices on software quality was mainly rated as positive. While maintainability received the most positive mentions, some major issues were associated with security. We present a description of each case and summarize the most important findings of companies across different domains and sizes. Researchers may build upon our findings and take them into account when designing industry-focused methods.},
   author = {Justus Bogner and Jonas Fritzsch and Stefan Wagner and Alfred Zimmermann},
   doi = {10.1109/ICSA-C.2019.00041},
   isbn = {9781728118765},
   journal = {Proceedings - 2019 IEEE International Conference on Software Architecture - Companion, ICSA-C 2019},
   keywords = {Microservices,industry,interviews,service technology,software quality},
   month = {5},
   pages = {187-195},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Microservices in Industry: Insights into Technologies, Characteristics, and Software Quality},
   year = {2019},
}
@article{Ponce2022,
   abstract = {Context: Securing microservices is crucial, as many IT companies are delivering their businesses through microservices. If security “smells” affect microservice-based applications, they can possibly suffer from security leaks and need to be refactored to mitigate the effects of security smells therein. Objective: As the available knowledge on securing microservices is scattered across different pieces of white and grey literature, our objective here is to distill well-known smells for securing microservices, together with the refactorings enabling to mitigate their effects. Method: To capture the state of the art and practice in securing microservices, we conducted a multivocal review of the existing white and grey literature on the topic. We systematically analysed 58 primary studies, selected among those published from 2011 until the end of 2020. Results: Ten bad smells for securing microservices are identified, which we organized in a taxonomy, associating each smell with the security properties it may violate and the refactorings enabling to mitigate its effects. Conclusions: The security smells and the corresponding refactorings have pragmatic value for practitioners, who can exploit them in their daily work on securing microservices. They also serve as a starting point for researchers wishing to establish new research directions on securing microservices.},
   author = {Francisco Ponce and Jacopo Soldani and Hernán Astudillo and Antonio Brogi},
   doi = {10.1016/j.jss.2022.111393},
   issn = {01641212},
   journal = {Journal of Systems and Software},
   month = {10},
   publisher = {Elsevier Inc.},
   title = {Smells and refactorings for microservices security: A multivocal literature review},
   volume = {192},
   year = {2022},
}
@article{Billawa2022,
   abstract = {Cloud-based application deployment is becoming increasingly popular among businesses, thanks to the emergence of microservices. However, securing such architectures is a challenging task since traditional security concepts cannot be directly applied to microservice architectures due to their distributed nature. The situation is exacerbated by the scattered nature of guidelines and best practices advocated by practitioners and organizations in this field. In this research paper we aim to shay light over the current microservice security discussions hidden within Grey Literature (GL) sources. Particularly, we identify the challenges that arise when securing microservice architectures, as well as solutions recommended by practitioners to address these issues. For this, we conducted a systematic GL study on the challenges and best practices of microservice security present in the Internet with the goal of capturing relevant discussions in blogs, white papers, and standards. We collected 312 GL sources from which 57 were rigorously classified and analyzed. This analysis on the one hand validated past academic literature studies in the area of microservice security, but it also identified improvements to existing methodologies pointing towards future research directions.},
   author = {Priyanka Billawa and Anusha Bambhore Tukaram and Nicolas E. Diaz Ferreyra and Jan Philipp Steghöfer and Riccardo Scandariato and Georg Simhandl},
   doi = {10.1145/3538969.3538986},
   isbn = {9781450396707},
   journal = {ACM International Conference Proceeding Series},
   keywords = {best practices,challenges,grey literature,microservices,security},
   month = {8},
   publisher = {Association for Computing Machinery},
   title = {SoK: Security of Microservice Applications: A Practitioners' Perspective on Challenges and Best Practices},
   year = {2022},
}
@article{,
   abstract = {Despite the numerous benefits of microservices systems, security has been a critical issue in such systems. Several factors explain this difficulty, including a knowledge gap among microservices practitioners on properly securing a microservices system. To (partially) bridge this gap, we conducted an empirical study. We first manually analyzed 861 microservices security points, including 567 issues, 9 documents, and 3 wiki pages from 10 GitHub open-source microservices systems and 306 Stack Overflow posts concerning security in microservices systems. In this study, a microservices security point is referred to as “a GitHub issue, a Stack Overflow post, a document, or a wiki page that entails 5 or more microservices security paragraphs”. Our analysis led to a catalog of 28 microservices security practices. We then ran a survey with 74 microservices practitioners to evaluate the usefulness of these 28 practices. Our findings demonstrate that the survey respondents affirmed the usefulness of the 28 practices. We believe that the catalog of microservices security practices can serve as a valuable resource for microservices practitioners to more effectively address security issues in microservices systems. It can also inform the research community of the required or less explored areas to develop microservices-specific security practices and tools.},
   author = {Ali Rezaei Nasab and Mojtaba Shahin and Seyed Ali Hoseyni Raviz and Peng Liang and Amir Mashmool and Valentina Lenarduzzi},
   doi = {10.1016/J.JSS.2022.111563},
   issn = {0164-1212},
   journal = {Journal of Systems and Software},
   keywords = {Empirical study,Microservice,Practice,Practitioners,Security},
   month = {4},
   pages = {111563},
   publisher = {Elsevier},
   title = {An empirical study of security practices for microservices systems},
   volume = {198},
   year = {2023},
}
